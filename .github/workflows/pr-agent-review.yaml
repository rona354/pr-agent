# This workflow enables developers to call PR-Agents `/[actions]` in PR's comments and upon PR creation. 
# Learn more at https://www.codium.ai/pr-agent/
# This is v0.2 of this workflow file

name: PR-Agent

on:
  pull_request:
    branches:
      - 'staging*'
      - 'release/**'
      - 'main'
  issue_comment:

permissions:
  issues: write
  pull-requests: write

jobs:
  pr_agent_job:
    runs-on: ubuntu-latest
    name: Run pr agent on every pull request
    steps:
      - name: PR Agent action step
        id: pragent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          OPENAI_ORG: ${{ secrets.OPENAI_ORG }} # optional
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PINECONE.API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE.ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
          # configurations
          pr_description.keep_original_user_title: true
          pr_description.add_original_user_description: true
          github_action.auto_describe: true # enable\disable auto describe
          github_action.auto_improve: true # enable\disable auto improve
      - name: Get conversations with "bug" tag or label
        id: get_conversations
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
          headers: |
            Authorization: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process conversations
        run: |
          # Process the comments fetched in ${{ steps.get_conversations.outputs.data }}
          # You can use a script or any other logic to filter comments with "bug" tag or label.
          # For example, using jq for JSON parsing.
          # You may need to install jq using 'apt-get install jq' if it's not available by default.
          #
          # Example filtering comments with "bug" tag:
          # echo ${{ steps.get_conversations.outputs.data }} | jq '.[] | select(.body | contains("bug"))'

          # Implement your logic here to handle the comments with "bug" tag.
        shell: bash
